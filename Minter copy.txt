// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0 ;
pragma experimental ABIEncoderV2;


import "../client/node_modules/@openzeppelin/contracts/access/Ownable.sol";
import "../client/node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol";
import "../client/node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "../client/node_modules/@openzeppelin/contracts/proxy/Proxy.sol";
import "./Coin.sol";

contract Minter is ReentrancyGuard{
    /*By tracking the details of each coin in lists in storage the contract is sacrificing
    deployment cost for frontend speed for lists. If I planned to run this on the EVM I would 
    give let users subscribe to the coins that they wanted to track and call the original ERC20 contracts
    individually to save deployment costs. Assuming cost optimization, the only necessary variables would be the ERC20 contract instances "coins"
    and the "creators" list (to keep track of the user who created the coin since the Minter contract address is always the true creator).
    All other variable are used for quick frontend development */
    uint counter;
    address[] public coinAddresses;
    address[] public creators;
    mapping(address => address[]) minters; //stores list of coins created by address
    Coin[] public coins;
    string[] public names;
    string[] public symbols;
    uint[] public supplies;

    event CoinCreated(address coinAddress, uint id);
    event CoinMinted(address minterAddress, uint supply);

    
    function createCoin(address _implementation, string memory _name, string memory _symbol,uint _initialSupply) external payable nonReentrant {
        
        Coin _coin = new Coin();
        _coin.initialize(msg.sender, _name, _symbol, _initialSupply, _implementation);
        coins.push(_coin);
        counter++;
        minters[msg.sender].push(address(_coin));
        creators.push(msg.sender);
        coinAddresses.push(address(_coin));

        names.push(_name);
        symbols.push(_symbol);
        supplies.push(_initialSupply);


        emit CoinCreated(address(_coin), coins.length);
    }






    function getNames() external view returns (string[] memory) {
        return names;
    }

    function getSymbols() external view returns (string[] memory) {
        return symbols;
    }

    function getSupplies() external view returns (uint[] memory){
        return supplies;
    }

    function getCoinAddresses() external view returns (address[] memory ){
        return coinAddresses;
    }

    function sendersCoins() external view returns (address[] memory){
        return minters[msg.sender];   
    }




}
